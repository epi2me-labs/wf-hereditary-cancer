//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {

    help = false
    version = false
    store_dir = null

    disable_ping = false
    threads = 4

    aws_image_prefix = null
    aws_queue = null

    out_dir = "output"

    // feature flags
    snp = true
    sv = true
    mod = true
    str = false

    // benchmark feature flags
    sv_benchmark = false
    sv_benchmark_vcf = null
    sv_benchmark_bed = null

    // common
    bam = null
    ref = null
    bed = null
    out_dir = "output"
    bam_min_coverage = 0
    downsample_coverage = false
    downsample_coverage_target = 60
    downsample_coverage_margin = 1.1
    depth_window_size = 25000
    output_gene_summary = true
    haplocheck = false
    sex = null
    mitogenome = null

    /// common
    ubam_map_threads = 8
    ubam_sort_threads = 3
    ubam_bam2fq_threads = 1
    merge_threads = 4

    // annotation
    annotation = true

    // snp
    basecaller_cfg = "dna_r10.4.1_e8.2_400bps_hac@v4.3.0"
    clair3_model_path = null // used for overriding the guessed clair3 model
    // workflow options
    use_longphase = false
    // clair3 parameters
    sample_name = "SAMPLE"
    ctg_name = null
    include_all_ctgs = false
    ref_pct_full = 0.1
    var_pct_full = 0.7
    GVCF = false
    base_err = 0.001
    gq_bin_size = 5
    snp_min_af = 0.08
    indel_min_af = 0.15
    vcf_fn = null
    min_contig_size = 0
    min_mq = 5
    min_cov = 2
    min_qual = 2
    refine_snp_with_sv = true

    // sv
    tr_bed= null
    // filterCalls
    min_sv_length = 30
    min_read_support = "auto"
    min_read_support_limit = 2
    // sniffles2 options
    cluster_merge_pos = 150
    sniffles_args = null

    // mod
    modkit_args = null
    force_strand = false
    modkit_threads = 4

    // output
    depth_intervals = false
    phased = true
    output_report = true

    // nfcore
    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wf,min_read_support,min_read_support_limit,fastq_only'

    wf {
        name = "wf-hereditary-cancer"
        example_cmd = [
            "--bam 'wf-hereditary-cancer-demo/demo.bam'"
        ]
        agent = null

        // container sha
        e2l_base_tag = "sha2b856c1f358ddf1576217a336bc0e9864b6dc0ed"
        e2l_snp_tag = "sha6d5c80963ce346695d98205563c87dc71fc182ff"
        e2l_sv_tag = "sha8f02fbfaea233fe4763f7c7142696efcadab2f4d"
        e2l_mod_tag = "sha0253e9e9ba92aacc852ba376edefe8ff0932f71a"
        snpeff_tag = "sha313729d816872d70b410752001a0e2654eb88807"
        common_sha = "sha338caea0a2532dc0ea8f46638ccc322bb8f9af48"
    }
}

manifest {
    name            = 'epi2me-labs/wf-hereditary-cancer'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-hereditary-cancer'
    description     = 'Variant calling in human hereditary cancer samples.'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.2'
    version         = '1.0.1'
}

epi2melabs {
    tags = "human,variant calling,cancer,targeted"
    icon = "faIdCard"
}

// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    container = "ontresearch/wf-human-variation:${params.wf.e2l_base_tag}"
    withLabel:wf_human_snp {
        container = "ontresearch/wf-human-variation-snp:${params.wf.e2l_snp_tag}"
    }
    withLabel:wf_human_sv {
        container = "ontresearch/wf-human-variation-sv:${params.wf.e2l_sv_tag}"
    }
    withLabel:wf_human_mod {
        container = "ontresearch/modkit:${params.wf.e2l_mod_tag}"
    }
    withLabel:snpeff_annotation {
        container = "ontresearch/snpeff:${params.wf.snpeff_tag}"
    }
    withLabel:wf_common {
        container = "ontresearch/wf-common:${params.wf.common_sha}"
    }

    shell = ['/bin/bash', '-euo', 'pipefail']

    // by default GPU tasks will run in serial to avoid GPU management.
    // cluster and cloud users can remove this with -profile discrete_gpus.
    // we use profiles to handle this as maxForks cannot be set dynamically
    // see https://github.com/nextflow-io/nextflow/discussions/3806 and CW-1857
    withLabel:gpu {
        maxForks = 1
    }
}


profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
        process."withLabel:gpu".containerOptions = "--gpus all"
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
            //envWhitelist = "" // if your cluster sets a variable to indicate which GPU has been assigned you will want to allow it here
        }
        process."withLabel:gpu".containerOptions = "--nv"
    }


    // keep stub conda profile to prevent unknown profile warning so users get a better error
    conda {
        conda {
            enabled = true
        }
    }

    // Using AWS batch.
    // May need to set aws.region and aws.batch.cliPath
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = { "${params.aws_queue}" }
            memory = '8G'
            container = { "${params.aws_image_prefix}-wf-human-variation:${params.wf.e2l_base_tag}" }
            withLabel:wf_human_snp {
                container = { "${params.aws_image_prefix}-wf-human-variation-snp:${params.wf.e2l_snp_tag}" }
            }
            withLabel:wf_human_sv {
                container = { "${params.aws_image_prefix}-wf-human-variation-sv:${params.wf.e2l_sv_tag}" }
            }
            withLabel:wf_human_mod {
                container = { "${params.aws_image_prefix}-modkit:${params.wf.e2l_mod_tag}" }
            }
            withLabel:snpeff_annotation {
                container = "${params.aws_image_prefix}-snpeff:${params.wf.snpeff_tag}"
            }
            withLabel:wf_common {
                container = "${params.aws_image_prefix}-wf-common:${params.wf.common_sha}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }

    // lift limit on simultaneous gpu jobs
    discrete_gpus {
        process."withLabel:gpu".maxForks = null
    }

}


timeline {
  enabled = true
  overwrite = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.out_dir}/execution/trace.txt"
}

env {
    PYTHONNOUSERSITE = 1
    JAVA_TOOL_OPTIONS = "-Xlog:disable -Xlog:all=warning:stderr"
}
